import { Interface } from '@deip/toolbox';

/* Keep args in functions to validate interface */

const ChainApi = Interface('ChainApi', {
  sendTxAsync: async function (tx) { },
  getProjectAsync: async function (projectId) { },
  getProjectsListAsync: async function () { },
  setBlockAppliedCallbackAsync: async function (cb) { },
  getStateAsync: async function (path) { },
  getConfigAsync: async function () { },
  getDynamicGlobalPropertiesAsync: async function () { },
  getChainPropertiesAsync: async function () { },
  getWitnessScheduleAsync: async function () { },
  getHardforkVersionAsync: async function () { },
  getNextScheduledHardforkAsync: async function () { },
  getAccountsAsync: async function (names) { },
  getAccountReferencesAsync: async function (accountId) { },
  lookupAccountNamesAsync: async function (accountNames) { },
  lookupAccountsAsync: async function (lowerBoundName, limit) { },
  getAccountCountAsync: async function () { },
  getAccountHistoryAsync: async function (account, from, limit) { },
  getOwnerHistoryAsync: async function (account) { },
  getRecoveryRequestAsync: async function (account) { },
  getWithdrawRoutesAsync: async function (account, withdrawRouteType) { },
  getAccountBandwidthAsync: async function (account, bandwidthType) { },
  getTransactionHexAsync: async function (trx) { },
  getKeyReferencesAsync: async function (keys, fullHistory) { },
  getAccountKeyReferencesAsync: async function (accounts, fullHistory) { },
  getTeamReferencesAsync: async function (teams, fullHistory) { },
  getTeamMemberReferencesAsync: async function (members, fullHistory) { },
  getBlockAsync: async function (blockNum) { },
  getOpsHistoryAsync: async function (from, limit, opt) { },
  getTransactionAsync: async function (trxId) { },
  getBlockHeaderAsync: async function (blockNum) { },
  getOpsInBlockAsync: async function (blockNum, onlyVirtual) { },
  getBlocksHistoryAsync: async function (from, limit) { },
  getAccountDeipToDeipTransfersAsync: async function (account, from, limit) { },
  getRequiredSignaturesAsync: async function (trx, availableKeys) { },
  getPotentialSignaturesAsync: async function (trx) { },
  verifyAuthorityAsync: async function (trx) { },
  getWitnessesAsync: async function (witnessIds) { },
  getWitnessByAccountAsync: async function (accountName) { },
  getWitnessesByVoteAsync: async function (from, limit) { },
  lookupWitnessAccountsAsync: async function (lowerBoundName, limit) { },
  getWitnessCountAsync: async function () { },
  getActiveWitnessesAsync: async function () { },
  getRewardFundAsync: async function (name) { },
  loginAsync: async function (username, password) { },
  getApiByNameAsync: async function (databaseApi) { },
  getVersionAsync: async function () { },
  broadcastTransactionAsync: async function (trx) { },
  broadcastTransactionWithCallbackAsync: async function (confirmationCallback, trx) { },
  broadcastBlockAsync: async function (b) { },
  setMaxBlockAgeAsync: async function (maxBlockAge) { },
  getTeamAsync: async function (account) { },
  lookupTeamsAsync: async function (lowerBound, limit) { },
  getTeamsAsync: async function (ids) { },
  getTeamByPermlinkAsync: async function (permlink) { },
  getTeamByIdAsync: async function (id) { },
  getReviewVotesByReviewIdAsync: async function (reviewId) { },
  getReviewVotesByReviewAsync: async function (reviewExternalId) { },
  getReviewVotesByVoterAsync: async function (account) { },
  getProjectsByTeamAsync: async function (externalId) { },
  getSchemaAsync: async function () { },
  getExpiringVestingDelegationsAsync: async function (account, from, limit) { },
  lookupDisciplinesAsync: async function (lowerBound, limit) { },
  getDisciplineAsync: async function (externalId) { },
  getDisciplineByNameAsync: async function (name) { },
  getDisciplinesByParentAsync: async function (parentExternalId) { },
  getProjectByPermlinkAsync: async function (teamId, permlink) { },
  getProjectByAbsolutePermlinkAsync: async function (teamPermlink, projectPermlink) { },
  getProjectsAsync: async function (ids) { },
  getProjectContentsByProjectAsync: async function (externalId) { },
  lookupProjectContentsAsync: async function (lowerBound, limit) { },
  getProjectLicenseAsync: async function (externalId) { },
  getProjectLicensesAsync: async function (externalIds) { },
  getProjectLicensesByLicenseeAsync: async function (licensee) { },
  getProjectLicensesByLicenserAsync: async function (licenser) { },
  getProjectLicensesByProjectAsync: async function (projectExternalId) { },
  getProjectLicensesByLicenseeAndProjectAsync: async function (licensee, projectExternalId) { },
  getProjectLicensesByLicenseeAndLicenserAsync: async function (licensee, licenser) { },
  getProjectContentAsync: async function (externalId) { },
  getProjectContentsAsync: async function (ids) { },
  getProjectContentByIdAsync: async function (id) { },
  getProjectContentByTypeAsync: async function (projectId, type) { },
  getProjectContentByPermlinkAsync: async function (projectId, permlink) { },
  getProjectContentByAbsolutePermlinkAsync: async function (teamPermlink, projectPermlink, researchContentPermlink) { },
  getExpertTokenAsync: async function (id) { },
  getExpertTokensByAccountNameAsync: async function (accountName) { },
  getExpertTokensByDisciplineAsync: async function (disciplineExternalId) { },
  getProposalAsync: async function (id) { },
  getProposalsByCreatorAsync: async function (creator) { },
  getTeamTokenByAccountAndProjectGroupIdAsync: async function (account, teamId) { },
  getProjectTokenSaleAsync: async function (tokenSaleExternalId) { },
  getProjectTokenSaleByIdAsync: async function (tokenSaleId) { },
  getProjectTokenSalesByProjectAsync: async function (projectExternalId) { },
  getProjectTokenSalesByProjectIdAsync: async function (projectId) { },
  getProjectTokenSalesAsync: async function (from, limit) { },
  getProjectTokenSaleContributionsByProjectTokenSaleAsync: async function (tokenSaleExternalId) { },
  getProjectTokenSaleContributionsByProjectTokenSaleIdAsync: async function (tokenSaleId) { },
  getProjectTokenSaleContributionsByContributorAsync: async function (owner) { },
  getDisciplinesByProjectAsync: async function (projectId) { },
  checkTeamExistenceByPermlinkAsync: async function (name) { },
  checkProjectExistenceByPermlinkAsync: async function (teamExternalId, title) { },
  checkProjectContentExistenceByPermlinkAsync: async function (projectExternalId, title) { },
  getExpertiseContributionByProjectContentAndDisciplineAsync: async function (projectContentId, disciplineId) { },
  getExpertiseContributionsByProjectAsync: async function (projectId) { },
  getExpertiseContributionsByProjectAndDisciplineAsync: async function (projectId, disciplineId) { },
  getExpertiseContributionsByProjectContentAsync: async function (projectContentId) { },
  lookupWitnessAccountsAsync: async function (lowerBoundName, limit) { },
  getWitnessByAccountAsync: async function (accountName) { },
  getReviewAsync: async function (externalId) { },
  getReviewsAsync: async function (ids) { },
  getReviewByIdAsync: async function (reviewId) { },
  getReviewsByProjectContentAsync: async function (projectContentExternalId) { },
  getReviewsByProjectAsync: async function (projectExternalId) { },
  getProjectTokenByIdAsync: async function (projectTokenId) { },
  getProjectTokensByAccountNameAsync: async function (accountName) { },
  getProjectTokensByProjectIdAsync: async function (projectId) { },
  getProjectTokenByAccountNameAndProjectIdAsync: async function (accountName, projectId) { },
  getExpertiseAllocationProposalByIdAsync: async function (id) { },
  getExpertiseAllocationProposalsByInitiatorAsync: async function (initiator) { },
  getExpertiseAllocationProposalsByClaimerAndDisciplineAsync: async function (claimer, disciplineId) { },
  getExpertiseAllocationProposalByDisciplineInitiatorAndClaimerAsync: async function (disciplineId, initiator, claimer) { },
  getExpertiseAllocationProposalsByDisciplineAsync: async function (disciplineId) { },
  getExpertiseAllocationProposalVoteByIdAsync: async function (id) { },
  getExpertiseAllocationProposalVotesByExpertiseAllocationProposalIdAsync: async function (expertiseAllocationProposalId) { },
  getExpertiseAllocationProposalVoteByVoterAndExpertiseAllocationProposalIdAsync: async function (voter, expertiseAllocationProposalId) { },
  getExpertiseAllocationProposalVotesByVoterAndDisciplineIdAsync: async function (voter, disciplineId) { },
  getExpertiseAllocationProposalVotesByVoterAsync: async function (voter) { },
  getAccountsByExpertDisciplineAsync: async function (disciplineId, from, limit) { },
  getReviewsByAuthorAsync: async function (author) { },
  getFundingOpportunityAnnouncementAsync: async function (id) { },
  getFundingOpportunityAnnouncementByNumberAsync: async function (number) { },
  getFundingOpportunityAnnouncementsByOrganizationAsync: async function (teamId) { },
  getFundingOpportunityAnnouncementsListingAsync: async function (page, limit) { },
  getGrantWithAnnouncedApplicationWindowAsync: async function (id) { },
  getGrantsWithAnnouncedApplicationWindowByGrantorAsync: async function (grantor) { },
  getGrantApplicationAsync: async function (id) { },
  getGrantApplicationsByGrantAsync: async function (grantId) { },
  getGrantApplicationsByProjectIdAsync: async function (projectId) { },
  getGrantApplicationReviewAsync: async function (id) { },
  getGrantApplicationReviewsByAuthorAsync: async function (author) { },
  getGrantApplicationReviewByAuthorAndApplicationAsync: async function (author, grantApplicaitonId) { },
  getGrantApplicationReviewsByGrantApplicationAsync: async function (grantApplicationId) { },
  getAwardAsync: async function (awardNumber) { },
  getAwardsByFundingOpportunityAsync: async function (fundingOpportunityNumber) { },
  getAwardRecipientAsync: async function (id) { },
  getAwardRecipientsByAwardAsync: async function (awardNumber) { },
  getAwardRecipientsByAccountAsync: async function (awardee) { },
  getAwardRecipientsByFundingOpportunityAsync: async function (number) { },
  getAwardWithdrawalRequestAsync: async function (awardNumber, paymentNumber) { },
  getAwardWithdrawalRequestsByAwardAsync: async function (awardNumber) { },
  getAwardWithdrawalRequestsByAwardAndSubawardAsync: async function (awardNumber, subawardNumber) { },
  getAwardWithdrawalRequestsByAwardAndStatusAsync: async function (awardNumber, status) { },
  getWithdrawalRequestsHistoryByAwardNumberAsync: async function (awardNumber) { },
  getWithdrawalRequestHistoryByAwardAndPaymentNumberAsync: async function (awardNumber, paymentNumber) { },
  getWithdrawalRequestsHistoryByAwardAndSubawardNumberAsync: async function (awardNumber, subawardNumber) { },
  getAssetAsync: async function (id) { },
  getAssetBySymbolAsync: async function (symbol) { },
  getAssetsByIssuerAsync: async function (issuer) { },
  getAssetsByTypeAsync: async function (type) { },
  lookupAssetsAsync: async function (lowerBoundSymbol, limit) { },
  getFundingTransactionAsync: async function (id) { },
  getFundingTransactionsBySenderOrganisationAsync: async function (senderOrganisationId) { },
  getFundingTransactionsByReceiverOrganisationAsync: async function (receiverOrganisationId) { },
  getAssetStatisticsAsync: async function (symbol) { },
  getAccountAssetBalanceAsync: async function (owner, symbol) { },
  getAccountAssetsBalancesAsync: async function (owner) { },
  getAccountsAssetBalancesByAssetAsync: async function (symbol) { },
  getProjectNdaAsync: async function (externalId) { },
  getProjectNdaByCreatorAsync: async function (creator) { },
  getProjectNdaByHashAsync: async function (hash) { },
  getProjectNdaByProjectAsync: async function (externalId) { },
  getNdaContractContentAccessRequestAsync: async function (externalId) { },
  getNdaContractContentAccessRequestsByNdaAsync: async function (ndaExternalId) { },
  getNdaContractContentAccessRequestsByRequesterAsync: async function (requester) { },
  getNdaContractRequestAsync: async function (id) { },
  getNdaContractRequestsByContractIdAsync: async function (contractId) { },
  getNdaContractRequestsByRequesterAsync: async function (requester) { },
  getNdaContractRequestByContractIdAndHashAsync: async function (contractId, encryptedPayloadHash) { },
  getSubscriptionAsync: async function (id) { },
  getSubscriptionByTeamIdAsync: async function (teamId) { },
  getSubscriptionsByOwnerAsync: async function (owner) { },
  getOrganisationHistoryAsync: async function (organisationId) { },
  getContentHistoryByHashAsync: async function (contentHash) { },
  getContentHistoryByProjectAndHashAsync: async function (projectId, contentHash) { },
  getContributionsHistoryByContributorAsync: async function (contributor) { },
  getContributionsHistoryByContributorAndProjectAsync: async function (contributor, projectId) { },
  getContributionsHistoryByProjectAsync: async function (projectId) { },
  getContributionsHistoryByTokenSaleAsync: async function (projectTokenSaleId) { },
  getContentReferencesAsync: async function (projectContentId) { },
  getContentReferences2Async: async function (projectContentExternalId) { },
  getContentsReferToContentAsync: async function (projectContentId) { },
  getContentsReferToContent2Async: async function (projectContentExternalId) { },
  getProjectContentEciHistoryAsync: async function (projectContentExternalId, cursor, disciplineFilter, fromFilter, toFilter, contributionTypeFilter, assessmentCriteriaTypeFilter) { },
  getProjectContentEciStatsAsync: async function (projectContentExternalId, disciplineFilter, fromFilter, toFilter, contributionTypeFilter, assessmentCriteriaTypeFilter) { },
  getProjectContentsEciStatsAsync: async function (disciplineFilter, fromFilter, toFilter, contributionTypeFilter, assessmentCriteriaTypeFilter) { },
  getProjectEciHistoryAsync: async function (projectExternalId, cursor, disciplineFilter, fromFilter, toFilter, contributionTypeFilter, assessmentCriteriaTypeFilter) { },
  getProjectEciStatsAsync: async function (projectExternalId, disciplineFilter, fromFilter, toFilter, contributionTypeFilter, assessmentCriteriaTypeFilter) { },
  getProjectsEciStatsAsync: async function (disciplineFilter, fromFilter, toFilter, contributionTypeFilter, assessmentCriteriaTypeFilter) { },
  getAccountEciHistoryAsync: async function (account, cursor, disciplineFilter, fromFilter, toFilter, contributionTypeFilter, assessmentCriteriaTypeFilter) { },
  getAccountEciStatsAsync: async function (account, disciplineFilter, fromFilter, toFilter, contributionTypeFilter, assessmentCriteriaTypeFilter) { },
  getAccountsEciStatsAsync: async function (disciplineFilter, fromFilter, toFilter, contributionTypeFilter, assessmentCriteriaTypeFilter) { },
  getDisciplinesEciStatsHistoryAsync: async function (fromFilter, toFilter, stepFilter) { },
  getDisciplineEciHistoryAsync: async function (disciplineFilter, fromFilter, toFilter, contributionTypeFilter, assessmentCriteriaTypeFilter) { },
  getDisciplinesEciLastStatsAsync: async function () { },
  getAccountRevenueHistoryBySecurityTokenAsync: async function (account, securityTokenExternalId, cursor, step, targetAssetSymbol) { },
  getAccountRevenueHistoryAsync: async function (account, cursor) { },
  getSecurityTokenRevenueHistoryAsync: async function (securityTokenExternalId, cursor) { },
  getProposalsBySignerAsync: async function (account) { },
  getProposalsBySignersAsync: async function (accounts) { },
  getProposalStateAsync: async function (externalId) { },
  getProposalsStatesAsync: async function (externalIds) { },
  lookupProposalsStatesAsync: async function (lowerBound, limit) { }
});


class BaseChainApi {
  constructor(impl) {
    Interface.implement(impl, ChainApi);
    return impl;
  }
}


export default BaseChainApi;